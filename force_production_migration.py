#!/usr/bin/env python3
"""
Script pour forcer l'application des migrations en production
"""

import requests
import json
import sys
import time

# Configuration de production
PRODUCTION_URL = "https://sitrad-web.onrender.com"
API_BASE_URL = f"{PRODUCTION_URL}/api/v1"

def get_jwt_token():
    """Obtenir un token JWT pour l'authentification"""
    login_data = {
        "username": "admin",
        "password": "admin123"
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/auth/token/",
            json=login_data,
            timeout=30
        )
        response.raise_for_status()
        return response.json()["access"]
    except Exception as e:
        print(f"‚ùå Erreur d'authentification: {e}")
        return None

def check_migration_status():
    """V√©rifier le statut des migrations"""
    print("üîç V√©rification du statut des migrations...")
    
    # Essayer d'acc√©der √† l'interface d'administration
    try:
        response = requests.get(f"{PRODUCTION_URL}/admin/", timeout=30)
        if response.status_code == 200:
            print("‚úÖ Interface d'administration accessible")
        else:
            print(f"‚ö†Ô∏è Interface d'administration: Status {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur d'acc√®s √† l'admin: {e}")

def trigger_migration():
    """D√©clencher une migration en cr√©ant un commit vide"""
    print("üöÄ Tentative de d√©clenchement des migrations...")
    
    # Cr√©er un commit vide pour forcer un red√©ploiement
    import subprocess
    
    try:
        # Commit vide avec message sp√©cifique pour les migrations
        result = subprocess.run([
            "git", "commit", "--allow-empty", 
            "-m", "deploy: Force migration application for pompes integration"
        ], capture_output=True, text=True, cwd=".")
        
        if result.returncode == 0:
            print("‚úÖ Commit vide cr√©√©")
            
            # Push vers le d√©p√¥t
            push_result = subprocess.run([
                "git", "push", "origin", "main"
            ], capture_output=True, text=True, cwd=".")
            
            if push_result.returncode == 0:
                print("‚úÖ Push r√©ussi - d√©ploiement en cours...")
                return True
            else:
                print(f"‚ùå Erreur de push: {push_result.stderr}")
                return False
        else:
            print(f"‚ùå Erreur de commit: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lors du d√©clenchement: {e}")
        return False

def wait_for_deployment(wait_time=180):
    """Attendre que le d√©ploiement se termine"""
    print(f"‚è≥ Attente du d√©ploiement ({wait_time} secondes)...")
    
    for i in range(wait_time // 10):
        time.sleep(10)
        print(f"‚è≥ {(i+1)*10}/{wait_time} secondes √©coul√©es...")
    
    print("‚úÖ Attente termin√©e")

def verify_migration():
    """V√©rifier que les migrations ont √©t√© appliqu√©es"""
    print("üîç V√©rification des migrations appliqu√©es...")
    
    token = get_jwt_token()
    if not token:
        return False
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(
            f"{API_BASE_URL}/production/",
            headers=headers,
            timeout=30
        )
        response.raise_for_status()
        
        data = response.json()
        if isinstance(data, dict) and 'results' in data:
            orders = data['results']
        elif isinstance(data, list):
            orders = data
        else:
            orders = []
        
        if orders and len(orders) > 0:
            first_order = orders[0]
            
            # V√©rifier les nouveaux champs
            new_fields = ['pompe_nom', 'pompe_marque', 'pompe_modele', 'pompe_statut', 'pompe_debit_max', 'pompe_operateur_nom']
            missing_fields = [field for field in new_fields if field not in first_order]
            
            if not missing_fields:
                print("‚úÖ Tous les nouveaux champs de pompes sont pr√©sents!")
                return True
            else:
                print(f"‚ùå Champs manquants: {missing_fields}")
                return False
        else:
            print("‚ùå Aucun ordre trouv√© pour v√©rification")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de v√©rification: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Force Application des Migrations en PRODUCTION")
    print("=" * 60)
    
    # √âtape 1: V√©rifier le statut actuel
    check_migration_status()
    
    # √âtape 2: D√©clencher un red√©ploiement
    if trigger_migration():
        # √âtape 3: Attendre le d√©ploiement
        wait_for_deployment(120)  # 2 minutes
        
        # √âtape 4: V√©rifier les r√©sultats
        if verify_migration():
            print("\nüéâ SUCCESS: Migrations appliqu√©es avec succ√®s!")
            sys.exit(0)
        else:
            print("\n‚ùå √âCHEC: Les migrations n'ont pas √©t√© appliqu√©es")
            sys.exit(1)
    else:
        print("\n‚ùå √âCHEC: Impossible de d√©clencher le red√©ploiement")
        sys.exit(1)