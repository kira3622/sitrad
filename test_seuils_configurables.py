#!/usr/bin/env python
"""
Script de test pour v√©rifier le fonctionnement des seuils configurables
"""

import os
import sys
import django
from decimal import Decimal

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'beton_project.settings')
django.setup()

from reports.models import ConfigurationSeuilsStock
from inventory.models import MatierePremiere

def test_configuration_seuils():
    """Test de la configuration des seuils"""
    print("=== TEST DE LA CONFIGURATION DES SEUILS ===")
    
    # Test 1: R√©cup√©ration des seuils par d√©faut
    print("\n1. Test de r√©cup√©ration des seuils par d√©faut:")
    config = ConfigurationSeuilsStock.get_seuils()
    print(f"   ‚úÖ Seuil critique: {config.seuil_critique}")
    print(f"   ‚úÖ Seuil bas: {config.seuil_bas}")
    print(f"   ‚úÖ Configuration: {config}")
    
    # Test 2: Modification des seuils
    print("\n2. Test de modification des seuils:")
    anciens_seuils = (config.seuil_critique, config.seuil_bas)
    config.seuil_critique = Decimal('15.0')
    config.seuil_bas = Decimal('75.0')
    config.modifie_par = 'test_script'
    config.save()
    
    # V√©rification de la modification
    config_modifiee = ConfigurationSeuilsStock.get_seuils()
    print(f"   ‚úÖ Nouveaux seuils - Critique: {config_modifiee.seuil_critique}, Bas: {config_modifiee.seuil_bas}")
    print(f"   ‚úÖ Modifi√© par: {config_modifiee.modifie_par}")
    
    # Test 3: V√©rification qu'il n'y a qu'une seule configuration
    print("\n3. Test d'unicit√© de la configuration:")
    nombre_configs = ConfigurationSeuilsStock.objects.count()
    print(f"   ‚úÖ Nombre de configurations: {nombre_configs} (doit √™tre 1)")
    
    # Test 4: Test avec des mati√®res premi√®res
    print("\n4. Test d'application des seuils:")
    matieres = MatierePremiere.objects.all()[:3]  # Prendre les 3 premi√®res
    
    for matiere in matieres:
        stock_actuel = matiere.stock_actuel
        niveau_alerte = 'normal'
        
        if stock_actuel <= config_modifiee.seuil_critique:
            niveau_alerte = 'critique'
        elif stock_actuel <= config_modifiee.seuil_bas:
            niveau_alerte = 'bas'
        
        print(f"   üì¶ {matiere.nom}: {stock_actuel} {matiere.unite_mesure} ‚Üí {niveau_alerte}")
    
    # Restauration des anciens seuils
    print("\n5. Restauration des seuils originaux:")
    config.seuil_critique = anciens_seuils[0]
    config.seuil_bas = anciens_seuils[1]
    config.modifie_par = 'test_script_restore'
    config.save()
    print(f"   ‚úÖ Seuils restaur√©s: Critique={anciens_seuils[0]}, Bas={anciens_seuils[1]}")
    
    return True

def test_integration_rapport():
    """Test d'int√©gration avec le rapport de stock"""
    print("\n=== TEST D'INT√âGRATION AVEC LE RAPPORT ===")
    
    from reports.views import rapport_stock
    from django.test import RequestFactory
    
    # Cr√©er une requ√™te factice
    factory = RequestFactory()
    request = factory.get('/reports/stock/')
    
    try:
        # Appeler la vue
        response = rapport_stock(request)
        print(f"   ‚úÖ Rapport de stock g√©n√©r√© avec succ√®s (status: {response.status_code})")
        
        # V√©rifier que les seuils sont dans le contexte
        if hasattr(response, 'context_data'):
            context = response.context_data
            if 'seuil_critique' in context and 'seuil_bas' in context:
                print(f"   ‚úÖ Seuils pr√©sents dans le contexte: {context['seuil_critique']}, {context['seuil_bas']}")
            else:
                print("   ‚ö†Ô∏è Seuils non trouv√©s dans le contexte")
        
        return True
    except Exception as e:
        print(f"   ‚ùå Erreur lors de la g√©n√©ration du rapport: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ D√âMARRAGE DES TESTS DES SEUILS CONFIGURABLES")
    print("=" * 60)
    
    try:
        # Test de la configuration
        success1 = test_configuration_seuils()
        
        # Test d'int√©gration
        success2 = test_integration_rapport()
        
        # R√©sum√©
        print("\n" + "=" * 60)
        print("üìä R√âSUM√â DES TESTS")
        print("=" * 60)
        
        if success1 and success2:
            print("‚úÖ TOUS LES TESTS SONT PASS√âS AVEC SUCC√àS!")
            print("‚úÖ L'interface de configuration des seuils fonctionne correctement")
            print("‚úÖ L'int√©gration avec le rapport de stock est op√©rationnelle")
        else:
            print("‚ùå CERTAINS TESTS ONT √âCHOU√â")
            if not success1:
                print("‚ùå Probl√®me avec la configuration des seuils")
            if not success2:
                print("‚ùå Probl√®me avec l'int√©gration du rapport")
        
    except Exception as e:
        print(f"‚ùå ERREUR CRITIQUE: {e}")
        sys.exit(1)
    
    print("\nüéâ Tests termin√©s!")